c(1:10)
perm
sample(1:10)
sample(1:10)
sample
sample.int
library(sdamr)
install.packages("sdamr")
# install.packages("sdamr")
#
library(sdamr)
data("cheerleader")
head(cheerleader)
str(cheerleader)
dta <- cheerleader
# remove participants which should be excluded
dta <- subset(dat, Excluded == 0)
# get rid of unused factor levels in Item by
dta$Item <- factor(dta$Item)
dta <- cheerleader
# remove participants which should be excluded
dta <- subset(dta, Excluded == 0)
# get rid of unused factor levels in Item by
dta$Item <- factor(dta$Item)
install.packages("forcats")
# install.packages("forcats")
#
library(forcats)
dta$Presentation <- forcats::fct_recode(dta$Item,
Different = "Control_Group",
Similar = "Distractor_Manipulation")
dta$Version <- forcats::fct_recode(dta$Task,
Identical = "Identical-Distractors",
Variant = "Self-Distractors")
dta
fct_recode()
fct_recode
sdamr::plot_raincloud(data=dta, y=Response, groups = Presentation) +
ggplot2::facet_wrap(~Version)
wdta <- tidyr::pivot_wider(dta,
id_cols = c("Participant", "Version"),
names_from = Presentation, values_from = Response)
head(wdta)
ldta <- tidyr::pivot_longer(wdta,
cols = c("Alone", "Different", "Similar"),
names_to = "Presentation",
values_to = "Response")
head(ldta)
# compute the top part (numerator)
wdta$W0 <- wdta$Alone + wdta$Different + wdta$Similar
# apply scaling factor to get the correct SS
wdta$W0 <- wdta$W0/sqrt(3)
wdta$W1 <- (1/3)*wdta$Different + (1/3)*wdta$Similar - (2/3)*wdta$Alone
wdta$W1 <- wdta$W1/sqrt((1/3)^2 + (1/3)^2 + (-2/3)^2)
wdta$W2 <- (1/2)*wdta$Different - (1/2)*wdta$Similar
wdta$w2 <- wdta$W2/sqrt(2/4)
##
contrasts(wdta$Version) <- c(0.5, -0.5)
mod0 <- lm(W0 ~ Version, data=wdta)
summary(mod0)
str(Wdta)
str(wdta)
summary(mod0)
car::Anova(mod0, type=3)
setwd("Documents/erf-rotation/Assets/Data/Test/")
dta <- read.table("1001/filesP1001_FormalStudy_erf.csv", sep = ",", header = TRUE)
str(dta)
dta[,c(1:18,27)] <- lapply(dta[,c(1:18,27)], FUN = function(x) { as.factor(x)})
dta$RT <- dta$EndTime - dta$BeginTime
dta$distErr <- sqrt((dta$AnsPos_X - dta$ResponsePos_X)^2 +
(dta$AnsPos_Z - dta$ResponsePos_Z)^2)
str(dta)
library (dplyr)
table(dta$LayoutBlockNum)
table(dta$Participant)
table(dta$LayoutType, dta$RotateDirection)
# first trial only
dta0 <- subset(dta, dta$PairCount == "0")
# Baseline
dta_baseline <- subset(dta0, dta0$Baseline == "True")
hist(dta_baseline$RT)
hist(dta_baseline$distErr)
hist(dta_baseline$RT)
hist(dta_baseline$distErr)
hist(dta_baseline$RT)
dta_baseline$RT
dta0 <- dta0[-3,]
hist(dta_baseline$RT)
# first trial only
dta0 <- subset(dta, dta$PairCount == "0")
# Baseline
dta_baseline <- subset(dta0, dta0$Baseline == "True")
hist(dta_baseline$RT)
hist(dta_baseline$distErr)
dta_baseline <- dta_baseline[-3,]
dta_baseline
hist(dta_baseline$RT)
mean(dta_baseline$RT)
# rotation doesn make sense here since all conditions didn't rotate
# position erro needs to check, perhaps it's Quest's fault
dta_baseline %>% group_by(TargetType) %>%
summarise(rt_m   = mean(RT),
rt_sd  = sd(RT),
err_m  = mean(distErr),
err_sd = sd(distErr))
mean(dta_baseline$RT)
sd(dta_baseline$RT)
dta_baseline$RT
# first trial only
dta0 <- subset(dta, dta$PairCount == "0")
# Baseline
dta_baseline <- subset(dta0, dta0$Baseline == "True")
dta_baseline$RT
dta_baseline <- dta_baseline[-c(2,3),]
mean(dta_baseline$RT)
sd(dta_baseline$RT)
hist(dta_baseline$RT)
hist(dta_baseline$distErr)
mean(dta_baseline$distErr)
sd(dta_baseline$distErr)
flag <- mean(dta_baseline$distErr) + 3*sd(dta_baseline$distErr)
flag
which(dta_baseline$distErr > flag)
# rotation doesn make sense here since all conditions didn't rotate
# position erro needs to check, perhaps it's Quest's fault
dta_baseline %>% group_by(TargetType) %>%
summarise(rt_m   = mean(RT),
rt_sd  = sd(RT),
err_m  = mean(distErr),
err_sd = sd(distErr))
# testing
dta_testing <- subset(dta0, dta0$Testing == "True")
subset(dta_testing, dta_testing$TargetType == "physicalTarget")
hist(dta_testing$RT)
mean(dta_testing$RT)
get_outliers <- function(x) {
c(mean(x) - sd(x)*3, mean(x) + sd(x)*3)
}
get_outliers(dta_testing$RT)
get_outliers <- function(x) {
out <- NULL
lb <- mean(x) - sd(x)*3
ub <- mean(x) + sd(x)*3
out <- which(x < lb)
out <- c(out, which(x) > ub)
if (length(out) == 0) print("No outlier found")
else out
}
get_outliers(dta_testing$RT)
get_outliers <- function(x) {
out <- NULL
lb <- mean(x) - sd(x)*3
ub <- mean(x) + sd(x)*3
out <- which(x < lb)
out <- c(out, which(x > ub))
if (length(out) == 0) print("No outlier found")
else out
}
get_outliers(dta_testing$RT)
# first trial only
dta0 <- subset(dta, dta$PairCount == "0")
# Baseline
dta_baseline <- subset(dta0, dta0$Baseline == "True")
get_outliers(dta_baseline$RT)
get_outliers(dta_baseline$distErr)
get_outliers(dta_baseline[-3,]$RT)
get_outliers(dta_testing$RT)
mean(dta_testing$RT)
sd(dta_testing$RT)
hist(dta_testing$RT)
hist(dta_testing$distErr)
get_outliers(dta_testing$distErr)
subset(dta_testing, dta_testing$TargetType == "physicalTarget")
dta_testing %>% group_by(TargetType, SelfRotation) %>%
summarise(rt_m   = mean(RT),
rt_sd  = sd(RT),
err_m  = mean(distErr),
err_sd = sd(distErr))
dta_testing %>% group_by(TargetType) %>%
summarise(rt_m   = mean(RT),
rt_sd  = sd(RT),
err_m  = mean(distErr),
err_sd = sd(distErr))
dta_testing %>% group_by(DecoyAmount, TargetType, SelfRotation) %>%
summarise(rt_m   = mean(RT),
rt_sd  = sd(RT),
err_m  = mean(distErr),
err_sd = sd(distErr))
dta_testing %>% group_by(TargetType, SelfRotation) %>%
summarise(rt_m   = mean(RT),
rt_sd  = sd(RT),
err_m  = mean(distErr),
err_sd = sd(distErr))
