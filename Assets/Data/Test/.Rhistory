c(1:10)
perm
sample(1:10)
sample(1:10)
sample
sample.int
library(sdamr)
install.packages("sdamr")
# install.packages("sdamr")
#
library(sdamr)
data("cheerleader")
head(cheerleader)
str(cheerleader)
dta <- cheerleader
# remove participants which should be excluded
dta <- subset(dat, Excluded == 0)
# get rid of unused factor levels in Item by
dta$Item <- factor(dta$Item)
dta <- cheerleader
# remove participants which should be excluded
dta <- subset(dta, Excluded == 0)
# get rid of unused factor levels in Item by
dta$Item <- factor(dta$Item)
install.packages("forcats")
# install.packages("forcats")
#
library(forcats)
dta$Presentation <- forcats::fct_recode(dta$Item,
Different = "Control_Group",
Similar = "Distractor_Manipulation")
dta$Version <- forcats::fct_recode(dta$Task,
Identical = "Identical-Distractors",
Variant = "Self-Distractors")
dta
fct_recode()
fct_recode
sdamr::plot_raincloud(data=dta, y=Response, groups = Presentation) +
ggplot2::facet_wrap(~Version)
wdta <- tidyr::pivot_wider(dta,
id_cols = c("Participant", "Version"),
names_from = Presentation, values_from = Response)
head(wdta)
ldta <- tidyr::pivot_longer(wdta,
cols = c("Alone", "Different", "Similar"),
names_to = "Presentation",
values_to = "Response")
head(ldta)
# compute the top part (numerator)
wdta$W0 <- wdta$Alone + wdta$Different + wdta$Similar
# apply scaling factor to get the correct SS
wdta$W0 <- wdta$W0/sqrt(3)
wdta$W1 <- (1/3)*wdta$Different + (1/3)*wdta$Similar - (2/3)*wdta$Alone
wdta$W1 <- wdta$W1/sqrt((1/3)^2 + (1/3)^2 + (-2/3)^2)
wdta$W2 <- (1/2)*wdta$Different - (1/2)*wdta$Similar
wdta$w2 <- wdta$W2/sqrt(2/4)
##
contrasts(wdta$Version) <- c(0.5, -0.5)
mod0 <- lm(W0 ~ Version, data=wdta)
summary(mod0)
str(Wdta)
str(wdta)
summary(mod0)
car::Anova(mod0, type=3)
version
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
example(stan_model, package = "rstan", run.dontrun = TRUE)
library("rstan")
install.packages(c("dplyr","purrr","tidyr", "extraDistr", "brms","hypr","lme4"))
install.packages(c("dplyr", "purrr", "tidyr", "extraDistr", "brms", "hypr", "lme4"))
install.packages(c("dplyr", "purrr", "tidyr", "extraDistr", "brms", "hypr", "lme4"))
install.packages(c("dplyr", "purrr", "tidyr", "extraDistr", "brms", "hypr", "lme4"))
install.packages(c("dplyr", "purrr", "tidyr", "extraDistr", "brms", "hypr", "lme4"))
install.packages(c("dplyr", "purrr", "tidyr", "extraDistr", "brms", "hypr", "lme4"))
## get pilot data
setwd("Documents/erf-rotation/Assets/Data/Test/")
## load packages
library(Rmisc)
library(dplyr)
library(ggplot2)
# y
# conditions and layouts (5,6,7) have some mistakes. Need to check that
dta_y <- read.table("1003/filesP1003_erf.csv", sep=",", h=T)
dta_q_y <- read.table("1003/filesP1003_questionnaire.csv", sep = ",", h=T)
dta_c_y <- read.table("1003/filesP1003Calibration_erf.csv", sep = ",", h=T)
# wj
dta_w <- read.table("1002/filesP1002_erf.csv", sep=",", h=T)
dta_q_w <- read.table("1002/filesP1002_questionnaire.csv", sep = ",", h=T)
dta_c_w <- read.table("1002/filesP1002Calibration_erf.csv", sep = ",", h=T)
# j
dta_j <- read.table("1001/filesP1001_FormalStudy_erf.csv", sep=",", h=T)
dta_q_j <- read.table("1001/filesP1001_questionnaire.csv", sep=",", h=T)
dta_c_j <- read.table("1001/filesP1001Calibration_erf.csv", sep=",", h=T)
## quickly organize data
# Calibration ratio
dta_c_j <- dta_c_j[1,]
dta_c_j$ParticipantID <- as.numeric(dta_c_j$ParticipantID)
dta_c_j$CalibratedRatio <- as.numeric(dta_c_j$CalibratedRatio)
dta_c <- rbind(dta_c_j, dta_c_w, dta_c_y)
dta_c$ParticipantID <- as.factor(dta_c$ParticipantID)
names(dta_c)[2] <- "UnityDistance"
dta_c$CalibratedRatio <- 1.5 / dta_c$UnityDistance
dta_c
# Questionnaire
dta_q <- rbind(dta_q_j, dta_q_w, dta_q_y)
dta_q$ParticipantID <- as.factor(dta_q$ParticipantID)
dta_q$Item <- as.factor(dta_q$Item)
ggplot(dta_q, aes(x = Item, y = Response)) +
geom_boxplot(fill = "gray90") +
lims(y = c(1, 5)) +
coord_flip() +
theme_bw()
tapply(dta_q$Response, dta_q$Item, mean)
tapply(dta_q$Response, dta_q$ParticipantID, mean)
# Experiment data
dta_w <- subset(dta_w, dta_w$isPractice == "False")
dta_w <- dta_w[,-3] # remove isPractice
dta_y <- subset(dta_y, dta_y$isPractice == "False")
dta_y <- dta_y[,-3] # remove isPractice
## this data is with mountain
dta_pilot <- rbind(dta_j, dta_w, dta_y)
dim(dta_pilot)
names(dta_pilot)[1] <- "Participant"
names(dta_pilot)[2] <- "trialID"
dta_pilot[,c(1:18,27)] <- lapply(
dta_pilot[,c(1:18,27)], FUN = function(x) { as.factor(x)})
# add RT and position error
dta_pilot$RT <- dta_pilot$EndTime - dta_pilot$BeginTime
dta_pilot$distErr <- sqrt((dta_pilot$AnsPos_X - dta_pilot$ResponsePos_X)^2 +
(dta_pilot$AnsPos_Z - dta_pilot$ResponsePos_Z)^2)
str(dta_pilot) # data is loaded for further processing
## Only the first response counts.
dta0 <- subset(dta_pilot, dta_pilot$PairCount == "0")
dta1 <- subset(dta_pilot, dta_pilot$PairCount == "1")
# copy past Ans target name and position
dim(dta0)
dim(dta1)
dta0$OtherTargetPos_X <- dta1$AnsPos_X
dta0$OtherTargetPos_Z <- dta1$AnsPos_Z
dta0$OtherTargetName <- dta1$TargetName
dta0$distTargets <- sqrt((dta0$OtherTargetPos_X - dta0$ResponsePos_X)^2 +
(dta0$OtherTargetPos_Z - dta0$ResponsePos_Z)^2)
str(dta0)
## Remove decoy responses
dta0 <- subset(dta0, dta0$DecoyBaseline == "False")
dta0 <- subset(dta0, dta0$DecoyTesting == "False")
dta0[, c(32,36)]
levels(dta0$Baseline) <- c("Testing", "Baseline")
##########################################
# check if turning direction is balanced, at the moment it's wrong
# need to change in Unity
##########################################
head(dta0, n = 20)
table(dta0$LayoutType, dta0$RotateDirection, dta0$Participant)
# Use z score and set the bar to 2.5
dta0 <- dta0 |> group_by(Participant) |>
mutate(OutlierRT = RT >= mean(RT) + (2.5 * sd(RT)) | RT <= mean(RT) - (2.5 * sd(RT)),
OutlierDist = distErr >= mean(distErr) + (2.5 * sd(distErr)) | distErr <= mean(distErr) - (2.5 * sd(distErr)))
dta_clean <- dta0[-c(which(dta0$OutlierDist == TRUE), which(dta0$OutlierRT == TRUE)),]
# removed portion
1 - (dim(dta_clean)[1]/dim(dta0)[1])
# specifically for one pilot data
idx.p <- which(dta_clean$Participant == "P1003")
idx.cond <- which(dta_clean$ConditionBlockNum == 5 | dta_clean$ConditionBlockNum == 6 | dta_clean$ConditionBlockNum == 7)
idx.phytar <- which(dta_clean$TargetType == "physicalTarget")
dta_clean2 <- dta_clean[-Reduce(intersect, list(idx.p, idx.cond, idx.phytar)),]
dim(dta_clean)
dim(dta_clean2)
##########################################
# check if people answer correctly...
# compare distErr and Ans, Target distance
# check position response (distErr) remove inaccurate responses
# dta_y's conditions and layouts (5,6,7) have some mistakes. Need to check that
# Set a threshold for baseline distErr ... like 0.5?
##########################################
which(dta_clean2$distErr > dta_clean2$distTargets)
# this graph is just for fun. It does not make lots of sense.
dta_clean2 |> ggplot(aes(x=RT, y=distErr, color=SelfRotation)) +
geom_point() +
stat_smooth(aes(color = SelfRotation), method = "lm", se = F) +
facet_grid(TargetType ~ .) +
theme_bw()
str(dta_clean2)
# Baseline vs. Testing
# mean calculation
dta_clean.mean <- dta_clean2 |> group_by(Participant, Baseline) |>
summarise(RT.mean = mean(RT),
distErr.mean = mean(distErr))
ggplot(dta_clean2, aes(x=RT, fill=Baseline)) +
geom_histogram(aes(y=after_stat(density)), color= "black", alpha=0.2, position='identity', binwidth=.200) +
geom_density(alpha=.2) +
geom_vline(data=dta_clean.mean, aes(xintercept=RT.mean, color=Baseline),
linetype="dashed", linewidth=1) +
facet_grid(Participant~.) +
scale_fill_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40")) +
scale_color_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40"))
ggplot(dta_clean2, aes(x=RT, fill=Baseline)) +
geom_histogram(aes(y=after_stat(density)), color= "black", alpha=0.2, position='identity', binwidth=.200) +
geom_density(alpha=.2) +
geom_vline(data=dta_clean.mean, aes(xintercept=RT.mean, color=Baseline),
linetype="dashed", linewidth=1) +
facet_grid(Participant~.) +
scale_fill_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40")) +
scale_color_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40"))
ggplot(dta_clean2, aes(x=distErr, fill=Baseline)) +
geom_histogram(aes(y=after_stat(density)), color= "black", alpha=0.2, position='identity', binwidth=.05) +
geom_density(alpha=.2) +
geom_vline(data=dta_clean.mean, aes(xintercept=distErr.mean, color=Baseline),
linetype="dashed", linewidth=1) +
facet_grid(Participant~.) +
scale_fill_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40")) +
scale_color_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40"))
#
dta_clean.cond <- dta_clean |> group_by(Participant, Baseline, Condition) |>
summarise(RT.mean = mean(RT),
distErr.mean = mean(distErr))
ggplot(dta_clean2, aes(x=RT, fill=Condition)) +
geom_histogram(aes(y=after_stat(density)), color= "black", alpha=0.2, position='identity', binwidth=.2) +
geom_density(alpha=.2) +
geom_vline(data=dta_clean.cond, aes(xintercept=RT.mean, color=Condition),
linetype="dashed", linewidth=1) +
facet_grid(Participant~Baseline) +
scale_fill_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40")) +
scale_color_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40"))
ggplot(dta_clean, aes(x=distErr, fill=Condition)) +
geom_histogram(aes(y=after_stat(density)), color= "black", alpha=0.2, position='identity', binwidth=.05) +
geom_density(alpha=.2) +
geom_vline(data=dta_clean.cond, aes(xintercept=distErr.mean, color=Condition),
linetype="dashed", linewidth=1) +
facet_grid(Participant~Baseline) +
scale_fill_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40")) +
scale_color_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40"))
ci.rt.by.decoy <- summarySEwithin(data = dta_clean2,
measurevar = "RT",
withinvars = "DecoyAmount",
idvar = "Participant")
ci.dist.by.decoy <- summarySEwithin(data = dta_clean2,
measurevar = "distErr",
withinvars = "DecoyAmount",
idvar = "Participant")
## Check if three decoys mess up people's performance badly
# three decoys vs. two decoys
dta_clean2 |> ggplot(aes(x=DecoyAmount, y=RT)) +
stat_summary(fun = mean, geom = "point", size = 4) +
geom_errorbar(data=ci.rt.by.decoy,
aes(ymin = RT - ci, ymax = RT + ci), width = .2) +
theme_bw()
dta_clean2 |> ggplot(aes(x=DecoyAmount, y=distErr)) +
stat_summary(fun = mean, geom = "point", size = 4) +
geom_errorbar(data=ci.dist.by.decoy,
aes(ymin = distErr - ci, ymax = distErr + ci), width = .2) +
theme_bw()
baseline.ci.rt <- summarySEwithin(data = dta_clean2,
measurevar = "RT",
withinvars = c("Baseline"),
idvar = "Participant")
baseline.ci.dist <- summarySEwithin(data = dta_clean2,
measurevar = "distErr",
withinvars = c("Baseline"),
idvar = "Participant")
#
baseline.ci.rt |>
ggplot(aes(x=reorder(Baseline, RT, mean),
y=RT)) +
geom_pointrange(aes(ymin = RT - ci, ymax = RT + ci)) +
labs(x="Response Type", y="Reaction Time (s)") +
theme_bw()
baseline.ci.dist |>
ggplot(aes(x=reorder(Baseline, distErr, mean),
y=distErr)) +
geom_pointrange(aes(ymin = distErr - ci, ymax = distErr + ci)) +
labs(x="Response Type", y="Absolut Position Error (m)") +
theme_bw()
base.cond.ci.rt <- summarySEwithin(data = dta_clean2,
measurevar = "RT",
withinvars = c("Condition", "Baseline"),
idvar = "Participant")
base.cond.ci.dist <- summarySEwithin(data = dta_clean2,
measurevar = "distErr",
withinvars = c("Condition", "Baseline"),
idvar = "Participant")
# RT summarized by conditions
base.cond.ci.rt |>
ggplot(aes(x=reorder(Baseline, RT, mean), y=RT,
shape=Condition, group=Condition, color=Condition)) +
geom_pointrange(aes(ymin = RT - ci, ymax = RT + ci),
position=position_dodge(width=.1)) +
geom_line(linetype="dashed", size=.5,
position=position_dodge(width=.1)) +
scale_shape_manual(values=c(18, 17, 20, 15)) +
scale_color_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40")) +
labs(x="Response Type", y="Reaction Time (s)") +
theme_bw()
# dist
base.cond.ci.dist |>
ggplot(aes(x=reorder(Baseline, distErr, mean), y=distErr,
shape=Condition, group=Condition, color=Condition)) +
geom_pointrange(aes(ymin = distErr - ci, ymax = distErr + ci),
position=position_dodge(width=.1)) +
geom_line(linetype="dashed", size=.5,
position=position_dodge(width=.1)) +
scale_shape_manual(values=c(18, 17, 20, 15)) +
scale_color_manual(values=c("#D81B60", "#1E88E5", "#FFC107", "#004D40")) +
labs(x="Response Type", y="Absolut Position Error (m)") +
theme_bw()
View(ci.rt.by.decoy)
